import { bytesToHex } from '@ethereumjs/util';
import { EVMError } from "../errors.js";
import { EVMErrorResult, OOGResult } from "../evm.js";
import { leading16ZeroBytesCheck } from "./bls12_381/index.js";
import { getPrecompileName } from "./index.js";
import { equalityLengthCheck, gasLimitCheck } from "./util.js";
export async function precompile0d(opts) {
    const pName = getPrecompileName('0e');
    const bls = opts._EVM['_bls'];
    // note: the gas used is constant; even if the input is incorrect.
    const gasUsed = opts.common.param('bls12381G2AddGas') ?? BigInt(0);
    if (!gasLimitCheck(opts, gasUsed, pName)) {
        return OOGResult(opts.gasLimit);
    }
    if (!equalityLengthCheck(opts, 512, pName)) {
        return EVMErrorResult(new EVMError(EVMError.errorMessages.BLS_12_381_INVALID_INPUT_LENGTH), opts.gasLimit);
    }
    // check if some parts of input are zero bytes.
    const zeroByteRanges = [
        [0, 16],
        [64, 80],
        [128, 144],
        [192, 208],
        [256, 272],
        [320, 336],
        [384, 400],
        [448, 464],
    ];
    if (!leading16ZeroBytesCheck(opts, zeroByteRanges, pName)) {
        return EVMErrorResult(new EVMError(EVMError.errorMessages.BLS_12_381_POINT_NOT_ON_CURVE), opts.gasLimit);
    }
    // TODO: verify that point is on G2
    let returnValue;
    try {
        returnValue = bls.addG2(opts.data);
    }
    catch (e) {
        return EVMErrorResult(e, opts.gasLimit);
    }
    if (opts._debug !== undefined) {
        opts._debug(`${pName} return value=${bytesToHex(returnValue)}`);
    }
    return {
        executionGasUsed: gasUsed,
        returnValue,
    };
}
//# sourceMappingURL=0d-bls12-g2add.js.map