export type EOFErrorMessage = (typeof EOFErrorMessage)[keyof typeof EOFErrorMessage];
export declare const EOFErrorMessage: {
    readonly OUT_OF_BOUNDS: "Trying to read out of bounds";
    readonly VERIFY_UINT: "Uint does not match expected value ";
    readonly VERIFY_BYTES: "Bytes do not match expected value";
    readonly FORMAT: "err: invalid format";
    readonly MAGIC: "err: invalid magic";
    readonly VERSION: "err: invalid eof version";
    readonly KIND_TYPE: "err: expected kind types";
    readonly KIND_CODE: "err: expected kind code";
    readonly KIND_DATA: "err: expected kind data";
    readonly TERMINATOR: "err: expected terminator";
    readonly TYPE_SIZE: "missing type size";
    readonly INVALID_TYPE_SIZE: "err: type section size invalid";
    readonly CODE_SIZE: "missing code size";
    readonly CODE_SECTION_SIZE: "code section should be at least one byte";
    readonly INVALID_CODE_SIZE: "code size does not match type size";
    readonly DATA_SIZE: "missing data size";
    readonly CONTAINER_SIZE: "missing container size";
    readonly CONTAINER_SECTION_SIZE: "container section should at least contain one section and at most 255 sections";
    readonly TYPE_SECTIONS: "err: mismatch of code sections count and type signatures";
    readonly INPUTS: "expected inputs";
    readonly OUTPUTS: "expected outputs";
    readonly MAX_INPUTS: "inputs exceeds 127, the maximum, got: ";
    readonly MAX_OUTPUTS: "outputs exceeds 127, the maximum, got: ";
    readonly CODE0_INPUTS: "first code section should have 0 inputs";
    readonly CODE0_OUTPUTS: "first code section should have 0x80 (terminating section) outputs";
    readonly MAX_STACK_HEIGHT: "expected maxStackHeight";
    readonly MAX_STACK_HEIGHT_LIMIT: "stack height limit of 1024 exceeded: ";
    readonly MIN_CODE_SECTIONS: "should have at least 1 code section";
    readonly CODE_SECTION: "expected a code section";
    readonly DATA_SECTION: "Expected data section";
    readonly CONTAINER_SECTION: "expected a container section";
    readonly CONTAINER_SECTION_MIN: "container section should be at least 1 byte";
    readonly INVALID_EOF_CREATE_TARGET: "EOFCREATE targets an undefined container";
    readonly INVALID_RETURN_CONTRACT_TARGET: "RETURNCONTRACT targets an undefined container";
    readonly CONTAINER_DOUBLE_TYPE: "Container is targeted by both EOFCREATE and RETURNCONTRACT";
    readonly UNREACHABLE_CONTAINER_SECTIONS: "Unreachable containers (by both EOFCREATE and RETURNCONTRACT)";
    readonly CONTAINER_TYPE_ERROR: "Container contains opcodes which this mode (deployment mode / init code / runtime mode) cannot have";
    readonly DANGLING_BYTES: "got dangling bytes in body";
    readonly INVALID_OPCODE: "invalid opcode";
    readonly INVALID_TERMINATOR: "invalid terminating opcode";
    readonly OPCODE_INTERMEDIATES_OOB: "invalid opcode: intermediates out-of-bounds";
    readonly INVALID_RJUMP: "invalid rjump* target";
    readonly INVALID_CALL_TARGET: "invalid callf/jumpf target";
    readonly INVALID_CALLF_RETURNING: "invalid callf: calls to non-returning function";
    readonly INVALID_STACK_HEIGHT: "invalid stack height";
    readonly INVALID_JUMPF: "invalid jumpf target (output count)";
    readonly INVALID_RETURNING_SECTION: "invalid returning code section: section is not returning";
    readonly RETURNING_NO_RETURN: "invalid section: section should return but has no RETF/JUMP to return";
    readonly RJUMPV_TABLE_SIZE0: "invalid RJUMPV: table size 0";
    readonly UNREACHABLE_CODE_SECTIONS: "unreachable code sections";
    readonly UNREACHABLE_CODE: "unreachable code (by forward jumps)";
    readonly DATALOADN_OOB: "DATALOADN reading out of bounds";
    readonly MAX_STACK_HEIGHT_VIOLATION: "Max stack height does not match the reported max stack height";
    readonly STACK_UNDERFLOW: "Stack underflow";
    readonly STACK_OVERFLOW: "Stack overflow";
    readonly UNSTABLE_STACK: "Unstable stack (can reach stack under/overflow by jumps)";
    readonly RETF_NO_RETURN: "Trying to return to undefined function";
    readonly RETURN_STACK_OVERFLOW: "Return stack overflow";
    readonly INVALID_EXTCALL_TARGET: "invalid extcall target: address > 20 bytes";
    readonly INVALID_RETURN_CONTRACT_DATA_SIZE: "invalid RETURNCONTRACT: data size lower than expected";
};
export declare function validationErrorMsg(type: EOFErrorMessage, ...args: any): string;
export declare function validationError(type: EOFErrorMessage, ...args: any): never;
//# sourceMappingURL=errors.d.ts.map